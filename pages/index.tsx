import Head from 'next/head';
import SiteWide from '@/components/homepage/SiteWide';
import ProductSlider from '@/components/homepage/ProductSlider';
import { BrandType } from '@/types/brandType';
import { Product, ProductType } from '@/types/productType';
import Categories from '@/components/homepage/Categories';
import { CategoryType } from '@/types/categoryType';
import Brands from '@/components/homepage/Brands';
import Partners from '@/components/homepage/Partners';
import BlogSection from '@/components/homepage/BlogSection';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { useEffect } from 'react';
// import { useTranslation } from 'react-i18next';
// import { useRouter } from 'next/router';



export interface HomeProps {
  brands?: BrandType[];
  products?: Product;
  categories?: CategoryType[];
  catData?:CategoryType[];
  currentPage?:number;
  totalPages?:number;
  setCurrentPage?:(value:number) => void
  setBrandId?:(value:any) => void
  handleCategoryClick?:(value:any, anotherValue:any) => void
  t?:any
}
const baseUrl = process.env.NEXT_PUBLIC_BASE_URL

export default function Home({ brands, products, categories }: HomeProps) {

  useEffect(() => {
    document.body.style.backgroundColor = "#f0f0dc"
  }, [])

  
  return (
    <>
      <Head>
        <title>Laportiva Group</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
        <link rel="shortcut icon" sizes="300x300" href="/favicon.ico" />
      </Head>

      <SiteWide  />
      <Brands brands={brands} />
      <Categories categories={categories} />
      <Partners />
      {/* <WhyChooseUs/> */}
      {/* <ProductSlider products={products} /> */}
      <BlogSection />
    </>
  )
}

export const getStaticProps = async ({locale}:any) => {
  const fetchAPI = async (url:string) => {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
    }
    return response.json();
  };

  const urls = {
    brands: `${baseUrl}/brands`,
    products: `${baseUrl}/products`,
    categories: `${baseUrl}/category/categories-parents`,
  };

  try {
    const results = await Promise.allSettled([
      fetchAPI(urls.brands),
      fetchAPI(urls.products),
      fetchAPI(urls.categories),
    ]);

    const [brandsResult, productsResult, categoryResult] = results;

    // Handling each result based on their status
    const brands = brandsResult.status === 'fulfilled' ? brandsResult.value : [];
    const products = productsResult.status === 'fulfilled' ? productsResult.value : [];
    const categories = categoryResult.status === 'fulfilled' ? categoryResult.value : [];

    return {
      props: {
        brands,
        products,
        categories,
        ...(await serverSideTranslations(locale, [
          'common',
          'about'
        ])),
      },
      revalidate: 600, // Revalidate data every 60 seconds
    };
  } catch (error) {
    console.error('Error fetching data:', error);
    return {
      props: {
        brands: [],
        products: [],
        categories: [],
      },
    };
  }
};


